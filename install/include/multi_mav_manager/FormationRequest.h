// Generated by gencpp from file multi_mav_manager/FormationRequest.msg
// DO NOT EDIT!


#ifndef MULTI_MAV_MANAGER_MESSAGE_FORMATIONREQUEST_H
#define MULTI_MAV_MANAGER_MESSAGE_FORMATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_mav_manager
{
template <class ContainerAllocator>
struct FormationRequest_
{
  typedef FormationRequest_<ContainerAllocator> Type;

  FormationRequest_()
    : param_names()
    , param_vals()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , spacing(0.0)
    , center()  {
      center.assign(0.0);
  }
  FormationRequest_(const ContainerAllocator& _alloc)
    : param_names(_alloc)
    , param_vals(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , spacing(0.0)
    , center()  {
  (void)_alloc;
      center.assign(0.0);
  }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param_names_type;
  _param_names_type param_names;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _param_vals_type;
  _param_vals_type param_vals;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _spacing_type;
  _spacing_type spacing;

   typedef boost::array<float, 3>  _center_type;
  _center_type center;




  typedef boost::shared_ptr< ::multi_mav_manager::FormationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_mav_manager::FormationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FormationRequest_

typedef ::multi_mav_manager::FormationRequest_<std::allocator<void> > FormationRequest;

typedef boost::shared_ptr< ::multi_mav_manager::FormationRequest > FormationRequestPtr;
typedef boost::shared_ptr< ::multi_mav_manager::FormationRequest const> FormationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_mav_manager::FormationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace multi_mav_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'quadrotor_msgs': ['/home/aarow/ros/vio_swarm_groundstation_ws/src/quadrotor_control/quadrotor_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_mav_manager::FormationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_mav_manager::FormationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_mav_manager::FormationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e7868a67a52e80d4ef7185b309ee7ae";
  }

  static const char* value(const ::multi_mav_manager::FormationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e7868a67a52e80dULL;
  static const uint64_t static_value2 = 0x4ef7185b309ee7aeULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_mav_manager/FormationRequest";
  }

  static const char* value(const ::multi_mav_manager::FormationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] param_names\n\
float32[] param_vals\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
float32 spacing\n\
float32[3] center\n\
";
  }

  static const char* value(const ::multi_mav_manager::FormationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param_names);
      stream.next(m.param_vals);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.spacing);
      stream.next(m.center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FormationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_mav_manager::FormationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_mav_manager::FormationRequest_<ContainerAllocator>& v)
  {
    s << indent << "param_names[]" << std::endl;
    for (size_t i = 0; i < v.param_names.size(); ++i)
    {
      s << indent << "  param_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param_names[i]);
    }
    s << indent << "param_vals[]" << std::endl;
    for (size_t i = 0; i < v.param_vals.size(); ++i)
    {
      s << indent << "  param_vals[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.param_vals[i]);
    }
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "spacing: ";
    Printer<float>::stream(s, indent + "  ", v.spacing);
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_MAV_MANAGER_MESSAGE_FORMATIONREQUEST_H
