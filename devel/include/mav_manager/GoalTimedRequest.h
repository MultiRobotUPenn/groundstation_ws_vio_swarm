// Generated by gencpp from file mav_manager/GoalTimedRequest.msg
// DO NOT EDIT!


#ifndef MAV_MANAGER_MESSAGE_GOALTIMEDREQUEST_H
#define MAV_MANAGER_MESSAGE_GOALTIMEDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mav_manager
{
template <class ContainerAllocator>
struct GoalTimedRequest_
{
  typedef GoalTimedRequest_<ContainerAllocator> Type;

  GoalTimedRequest_()
    : goal()
    , duration()
    , t_start()  {
      goal.assign(0.0);
  }
  GoalTimedRequest_(const ContainerAllocator& _alloc)
    : goal()
    , duration()
    , t_start()  {
  (void)_alloc;
      goal.assign(0.0);
  }



   typedef boost::array<float, 4>  _goal_type;
  _goal_type goal;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef ros::Time _t_start_type;
  _t_start_type t_start;




  typedef boost::shared_ptr< ::mav_manager::GoalTimedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_manager::GoalTimedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoalTimedRequest_

typedef ::mav_manager::GoalTimedRequest_<std::allocator<void> > GoalTimedRequest;

typedef boost::shared_ptr< ::mav_manager::GoalTimedRequest > GoalTimedRequestPtr;
typedef boost::shared_ptr< ::mav_manager::GoalTimedRequest const> GoalTimedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_manager::GoalTimedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mav_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_manager::GoalTimedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_manager::GoalTimedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_manager::GoalTimedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c9a1ea281c62219122f22aa2b508b97";
  }

  static const char* value(const ::mav_manager::GoalTimedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c9a1ea281c62219ULL;
  static const uint64_t static_value2 = 0x122f22aa2b508b97ULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_manager/GoalTimedRequest";
  }

  static const char* value(const ::mav_manager::GoalTimedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] goal\n\
duration duration\n\
time t_start\n\
";
  }

  static const char* value(const ::mav_manager::GoalTimedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.duration);
      stream.next(m.t_start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalTimedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_manager::GoalTimedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_manager::GoalTimedRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "t_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t_start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_MANAGER_MESSAGE_GOALTIMEDREQUEST_H
